<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on FE異世界物語</title>
    <link>https://kinko25.tech/tags/hugo/</link>
    <description>Recent content in Hugo on FE異世界物語</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 06 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://kinko25.tech/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>お名前.comとCloudflareでSSL対応</title>
      <link>https://kinko25.tech/blog/%E3%81%8A%E5%90%8D%E5%89%8D.com%E3%81%A8cloudflare%E3%81%A7ssl%E5%AF%BE%E5%BF%9C/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kinko25.tech/blog/%E3%81%8A%E5%90%8D%E5%89%8D.com%E3%81%A8cloudflare%E3%81%A7ssl%E5%AF%BE%E5%BF%9C/</guid>
      <description>Hugo+Github Pagesで作ったブログを、お名前.comとCloudflareでSSL対応してみました なぜSSL対応したのか 下の記事を読めばお分かりいただけるでしょう。
【緊急】2018年7月からSSL化していないサイト「http://」は「保護されていません」と警告が表示されるようになります！-エムタメ！
https://mtame.jp/column/ssl_chrome68
もうその7月がやってきてしまったからですね。
まだSSL対応していないサイトも多いので、
対応していないとこはGoogleでの検索順位も下がりそうですね。
今回SSL化対応する際に、色々詰まるとこがあったので、皆さんの参考になればと思い、
こちらで対応方法を書かせていただきます。
SSL化するために必要なこと ①お名前.comでの、アカウント登録とドメイン取得。
※お名前.comじゃなくてもいいです。ただ、今回ご紹介するのは、お名前.comでのやり方です。
②Cloudflareでのアカウント登録
③Hugo+Github Pagesで作成したサイト
ざっくり必要だったようなことを上げていきます。
ドメインを取得 「お名前.com」でドメイン取得しましょう。
https://www.onamae.com/
ドメイン取得が出来たら、
「お名前.com Navi」にログインして
↓
上のタブから「DNS」タブをクリックします。
↓
遷移したら、「ドメインのDNS関連機能設定」を選択し、「次へ」。
↓
先程、取得したドメインにチェックを入れて、「次へ進む」
ここまで来たらここは開きっぱなしにしておきましょう。
github.ioのIPアドレスをdigる IPアドレスの調べ方について、調べてみると、
どこの記事でもdigコマンドを使っていますが、
私のPCでは、digコマンドが使えなかったので、
digコマンドを使わなくてもIPアドレスを調べられる方法を書きます。
※digコマンドを使うためにツールをインストールしたりもしましたが、ダメでした・・・。
とは言っても、下のリンク先で、ホスト名に「アカウント名.github.io」のドメインを入力して
「digを実行する」というボタンを押すだけの作業ですｗ
https://www.cman.jp/network/support/nslookup.html
実行すると、情報が吐き出されるので、
「;; ANSWER SECTION:」の中にある
123.xxx.xxx.xxx
456.xxx.xxx.xxx
のドットで区切られた数字がIPアドレスです。
このIPアドレスが上から1番目と2番目が必要になります。
このアドレスを次のDNS設定で使用します。
DNS登録を行う digってIPアドレスをゲットしたら
先程、「ドメインを取得」で紹介した開きっぱなしのタブに戻りましょう。
↓
「DNSレコード設定を利用する」の「設定する」をクリック。
↓
上の画像のとこまで移動して
「VALUE」のとこにdigで取得したgithub.ioのIPアドレスを入力して「追加」しましょう。
上の流れが終わったら、
「ホスト名」に「www」と入力。
「TYPE」に「CNAME」を選択。
「VALUE」に「アカウント名.github.io」を入力して追加。
CNAMEファイルを作成 git管理しているルートディレクトリに「CNAME」を作成。
エディターでCNAMEを開き、お名前.comで取得したドメインを入力して保存。
デプロイしてリモートにも上げておきましょう。
ドメインをCloudflareに登録 CloudFlareの公式サイトです。
https://www.cloudflare.com/ja-jp/
ここでアカウントを作成してください。</description>
    </item>
    
    <item>
      <title>【後編】Hugo&#43;Github Pagesで作ってみた</title>
      <link>https://kinko25.tech/blog/%E5%BE%8C%E7%B7%A8hugo&#43;github-pages%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kinko25.tech/blog/%E5%BE%8C%E7%B7%A8hugo&#43;github-pages%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>Github Pagesにブログを開設してみた。 ブログの基本設定をカスタムしてみる。 私がいじった設定は、主にconfig.tomlのSNSシェアボタンの表示・非表示設定や、 アイコンなどの設定、サイトのタイトル名などを変更してあります。
あまりボタンが多すぎても邪魔くさいと感じてしまう人間なので、かなり削ってる方だと思います。
サイトをローカルで見てみる カスタムしていると、「どこが、どんな風に変わったのか」がわからないので、 ローカルサーバーを立てて確認したいと思います。 ターミナルを開いて、下記コマンドをblogディレクトリ内で叩いてみましょう。
$ hugo server Building sites … | EN +------------------+----+ Pages | 31 Paginator pages | 1 Non-page files | 0 Static files | 35 Processed images | 0 Aliases | 7 Sitemaps | 1 Cleaned | 0  コマンドを実行すると、「Building sites …」といった感じで、 ローカルサーバーが立ちます。 localhost:1313/で見れるかと思います。 問題なければ、本番反映しましょう。
$ ./deploy.sh # このコマンドだけ叩けば、本番反映されます。  Google Analyticsを設定する Downloadしたテーマにもよりますが、 config.tomlの最初の方に
googleAnalytics = &amp;quot;&amp;quot;  という項目ありますので、
googleAnalytics = &amp;quot;UA-000000-1&amp;quot;  と、ご自身のUAから始まるものをいれてビルドしてあげるだけです。</description>
    </item>
    
    <item>
      <title>【前編】Hugo&#43;Github Pagesで作ってみた</title>
      <link>https://kinko25.tech/blog/%E5%89%8D%E7%B7%A8hugo&#43;github-pages%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kinko25.tech/blog/%E5%89%8D%E7%B7%A8hugo&#43;github-pages%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>Github Pagesにブログを開設してみた。 無料サーバーでブログを運営したい。 「金払ってワードプレスで作るのも、勿体無い。。。」 「はてなブログなどは楽だけど、自由度が。。。。」と思い、Github Pagesを使って、 ブログを開設してみました。
最初、Jekyllでやろうとしましたが、Windowsとの相性が悪いって書かれてたので、
Hugoでやることに。
出来上がってから、Jekyllをchocolateyでできるっぽいことを知ったのですが、 もう作ってしまったものはしょうがないので、
「Jekyllでやりたい！」という人は試してみてはどうでしょう。
テーマ一覧を見ると、Jekyllの方が充実してると思う。
Hugoテーマリスト：
https://themes.gohugo.io/
jekyllテーマリスト ：
http://jekyllthemes.org/
Hugoはデザイン的に、なんだかイケてないというか・・・。ｗ
Hugoとは？ ・golangで作られた静的ジェネレーター
・他のツールのように、デプロイコマンドがない
・HTML/CSSを出力する動作が早い
かなりざっくりですが。
メリット ・ワードプレスのようなログインがない
・テーマの自由度
・記事作成後にコマンド一回叩けば本番反映される
・Github Pagesを使ってるので無料
・デフォルトのドメインであれば、SSL化されてる
などなどｗ
環境 ・Windows7 64bit
・git
・chocolatey
・ターミナルはbash
まず、環境構築 では、早速インストールした手順をざっくり紹介していきます。
Hugoを使うきっかけはこれ。
https://onoxeve.com/posts/hugo-on-github-pages/
上記の記事内では、Homebrewを紹介しているが、WindowsではHomebrewを使えないため、
この記事では、Windowsを使っている人向けになります。
Homebrewの代わりとなるchocolateyをコマンドプロンプトから入れた。
 ## 下記のコマンドをコピペで入力。 @&amp;quot;%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe&amp;quot; -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command &amp;quot;iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))&amp;quot; &amp;amp;&amp;amp; SET &amp;quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&amp;quot;  参考URL：https://chocolatey.org/install#installing-chocolatey インストール後、VS codeの再起動を行い、ターミナルでchocolateyコマンドを叩けば、VS codeでも使えることがわかる。
Hugoを入れる chocolateyコマンドが使えるのを確認後、
# 上記の工程が完了したら、ターミナルで下記コマンドを叩いてください。 $ choco install hugo  hugoのインストールが完了したら ターミナルでgit管理するディレクトリを作成していきます。</description>
    </item>
    
  </channel>
</rss>